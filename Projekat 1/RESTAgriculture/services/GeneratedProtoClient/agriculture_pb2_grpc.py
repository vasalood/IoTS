# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import agriculture_pb2 as agriculture__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agriculture_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgricultureStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetData = channel.unary_unary(
                '/greet.Agriculture/GetData',
                request_serializer=agriculture__pb2.RequestById.SerializeToString,
                response_deserializer=agriculture__pb2.SingleDataResponse.FromString,
                _registered_method=True)
        self.GetDataByTimeSpan = channel.unary_stream(
                '/greet.Agriculture/GetDataByTimeSpan',
                request_serializer=agriculture__pb2.RequestByTimeSpan.SerializeToString,
                response_deserializer=agriculture__pb2.SingleDataResponse.FromString,
                _registered_method=True)
        self.UpdateData = channel.unary_unary(
                '/greet.Agriculture/UpdateData',
                request_serializer=agriculture__pb2.UpdateRequest.SerializeToString,
                response_deserializer=agriculture__pb2.FeedbackResponse.FromString,
                _registered_method=True)
        self.AddData = channel.unary_unary(
                '/greet.Agriculture/AddData',
                request_serializer=agriculture__pb2.AddRequest.SerializeToString,
                response_deserializer=agriculture__pb2.FeedbackResponse.FromString,
                _registered_method=True)
        self.DeleteData = channel.unary_unary(
                '/greet.Agriculture/DeleteData',
                request_serializer=agriculture__pb2.RequestById.SerializeToString,
                response_deserializer=agriculture__pb2.FeedbackResponse.FromString,
                _registered_method=True)
        self.MaxTemperature = channel.unary_unary(
                '/greet.Agriculture/MaxTemperature',
                request_serializer=agriculture__pb2.RequestByTimeSpan.SerializeToString,
                response_deserializer=agriculture__pb2.SingleDataResponse.FromString,
                _registered_method=True)
        self.MinHumidity = channel.unary_unary(
                '/greet.Agriculture/MinHumidity',
                request_serializer=agriculture__pb2.RequestByStartDateTime.SerializeToString,
                response_deserializer=agriculture__pb2.SingleDataResponse.FromString,
                _registered_method=True)
        self.AvgTempAndHum = channel.stream_stream(
                '/greet.Agriculture/AvgTempAndHum',
                request_serializer=agriculture__pb2.MonthRequest.SerializeToString,
                response_deserializer=agriculture__pb2.AvgResponse.FromString,
                _registered_method=True)
        self.CountWaterPumpOn = channel.unary_unary(
                '/greet.Agriculture/CountWaterPumpOn',
                request_serializer=agriculture__pb2.RequestByTimeSpan.SerializeToString,
                response_deserializer=agriculture__pb2.SumResponse.FromString,
                _registered_method=True)


class AgricultureServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataByTimeSpan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaxTemperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MinHumidity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvgTempAndHum(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountWaterPumpOn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgricultureServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=agriculture__pb2.RequestById.FromString,
                    response_serializer=agriculture__pb2.SingleDataResponse.SerializeToString,
            ),
            'GetDataByTimeSpan': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDataByTimeSpan,
                    request_deserializer=agriculture__pb2.RequestByTimeSpan.FromString,
                    response_serializer=agriculture__pb2.SingleDataResponse.SerializeToString,
            ),
            'UpdateData': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateData,
                    request_deserializer=agriculture__pb2.UpdateRequest.FromString,
                    response_serializer=agriculture__pb2.FeedbackResponse.SerializeToString,
            ),
            'AddData': grpc.unary_unary_rpc_method_handler(
                    servicer.AddData,
                    request_deserializer=agriculture__pb2.AddRequest.FromString,
                    response_serializer=agriculture__pb2.FeedbackResponse.SerializeToString,
            ),
            'DeleteData': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteData,
                    request_deserializer=agriculture__pb2.RequestById.FromString,
                    response_serializer=agriculture__pb2.FeedbackResponse.SerializeToString,
            ),
            'MaxTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.MaxTemperature,
                    request_deserializer=agriculture__pb2.RequestByTimeSpan.FromString,
                    response_serializer=agriculture__pb2.SingleDataResponse.SerializeToString,
            ),
            'MinHumidity': grpc.unary_unary_rpc_method_handler(
                    servicer.MinHumidity,
                    request_deserializer=agriculture__pb2.RequestByStartDateTime.FromString,
                    response_serializer=agriculture__pb2.SingleDataResponse.SerializeToString,
            ),
            'AvgTempAndHum': grpc.stream_stream_rpc_method_handler(
                    servicer.AvgTempAndHum,
                    request_deserializer=agriculture__pb2.MonthRequest.FromString,
                    response_serializer=agriculture__pb2.AvgResponse.SerializeToString,
            ),
            'CountWaterPumpOn': grpc.unary_unary_rpc_method_handler(
                    servicer.CountWaterPumpOn,
                    request_deserializer=agriculture__pb2.RequestByTimeSpan.FromString,
                    response_serializer=agriculture__pb2.SumResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'greet.Agriculture', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('greet.Agriculture', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Agriculture(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/greet.Agriculture/GetData',
            agriculture__pb2.RequestById.SerializeToString,
            agriculture__pb2.SingleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataByTimeSpan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/greet.Agriculture/GetDataByTimeSpan',
            agriculture__pb2.RequestByTimeSpan.SerializeToString,
            agriculture__pb2.SingleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/greet.Agriculture/UpdateData',
            agriculture__pb2.UpdateRequest.SerializeToString,
            agriculture__pb2.FeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/greet.Agriculture/AddData',
            agriculture__pb2.AddRequest.SerializeToString,
            agriculture__pb2.FeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/greet.Agriculture/DeleteData',
            agriculture__pb2.RequestById.SerializeToString,
            agriculture__pb2.FeedbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MaxTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/greet.Agriculture/MaxTemperature',
            agriculture__pb2.RequestByTimeSpan.SerializeToString,
            agriculture__pb2.SingleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MinHumidity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/greet.Agriculture/MinHumidity',
            agriculture__pb2.RequestByStartDateTime.SerializeToString,
            agriculture__pb2.SingleDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AvgTempAndHum(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/greet.Agriculture/AvgTempAndHum',
            agriculture__pb2.MonthRequest.SerializeToString,
            agriculture__pb2.AvgResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountWaterPumpOn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/greet.Agriculture/CountWaterPumpOn',
            agriculture__pb2.RequestByTimeSpan.SerializeToString,
            agriculture__pb2.SumResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
